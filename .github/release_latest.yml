name: release latest with all library versions

on:
  push:
    branches: [ "main", "os_extention" ]
  pull_request:
    branches: [ "main" ]

jobs:
  release:
    name: create_latest
    runs-on: ubuntu-latest
    steps:
      - name: release_latest
        shell: bash 
        run: gh release create latest --latest

  build:
    needs: release
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        cpu: ["x86_64"]
        platform: ["debug"]

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "cmake-root=${{ github.workspace }}" >> "$GITHUB_OUTPUT"
        echo "install-dir=${{ github.workspace }}/dandelion_sdk" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -S ${{ steps.strings.outputs.cmake-root }}
        -DDANDELION_PLATFORM=${{ matrix.platform }}
        -DARCHITECTURE=${{ matrix.cpu }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }}

    - name: Install
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }}

    - name: Compress
      shell: bash
      run: tar -czf "~/dandelion_sdk_${{matrix.platform}}_${{matrix.cpu}}.tar.gz" ${{ steps.strings.outputs.install-dir }}
    
    - name: Add to release
      shell: bash
      run: gh release upload "~/dandelion_sdk_${{matrix.platform}}_${{matrix.cpu}}.tar.gz" --clobber